<!DOCTYPE html>
<html lang="pt-BR" class="[scrollbar-gutter:stable]">
  <head>
    {Application.get_env(:live_debugger, :live_debugger_tags)}

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
    <meta name="csrf-token" content={get_csrf_token()} />
    
<!-- PWA Meta Tags -->
    <meta name="application-name" content="JuruConnect" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="JuruConnect" />
    <meta name="description" content="Dashboard de vendas e controle comercial" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="msapplication-config" content="/browserconfig.xml" />
    <meta name="msapplication-TileColor" content="#3b82f6" />
    <meta name="msapplication-tap-highlight" content="no" />
    <meta name="theme-color" content="#3b82f6" />
    
<!-- PWA Links -->
    <link rel="manifest" href="/manifest.json" />
    <link rel="shortcut icon" href="/favicon.ico" />
    
<!-- Apple Touch Icons -->
    <link rel="apple-touch-icon" href="/assets/icon-180x180.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/icon-180x180.png" />
    
<!-- Standard Icons -->
    <link rel="icon" type="image/png" sizes="32x32" href="/assets/icon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/icon-16x16.png" />

    <.live_title default="JuruConnect" suffix=" · Dashboard">
      {assigns[:page_title]}
    </.live_title>
    <link phx-track-static rel="stylesheet" href={~p"/assets/app.css"} />
    <script defer phx-track-static type="text/javascript" src={~p"/assets/app.js"}>
    </script>
    
<!-- PWA Service Worker Registration -->
    <script>
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', function() {
          navigator.serviceWorker.register('/sw.js')
            .then(function(registration) {
              console.log('SW registered: ', registration);
              
              // Verificar por atualizações
              registration.addEventListener('updatefound', () => {
                const newWorker = registration.installing;
                newWorker.addEventListener('statechange', () => {
                  if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                    // Nova versão disponível
                    if (confirm('Nova versão disponível! Deseja atualizar?')) {
                      newWorker.postMessage({ type: 'SKIP_WAITING' });
                      window.location.reload();
                    }
                  }
                });
              });
            })
            .catch(function(registrationError) {
              console.log('SW registration failed: ', registrationError);
            });
        });
        
        // Recarregar quando o SW for atualizado
        navigator.serviceWorker.addEventListener('controllerchange', () => {
          window.location.reload();
        });
      }
    </script>
  </head>
  <body class="bg-white">
    {@inner_content}
  </body>
</html>
